package service

import "testing"

func TestCountChars(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected int
	}{
		{"Empty string", "", 0},
		{"Single character", "a", 1},
		{"Multiple characters", "hello", 5},
		{"Unicode characters", "„Åì„Çì„Å´„Å°„ÅØ", 5},
		{"Emoji characters", "üòäüëç", 2},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := CountChars(tt.input)
			if result != tt.expected {
				t.Errorf("CountChars(%q) = %d; want %d", tt.input, result, tt.expected)
			}
		})
	}
}

func TestPadLeft(t *testing.T) {
	tests := []struct {
		name     string
		s        string
		width    int
		padChar  rune
		expected string
	}{
		{"String m√°s corta que width", "abc", 5, ' ', "  abc"},
		{"String igual a width", "abc", 3, ' ', "abc"},
		{"String m√°s larga que width", "abcde", 3, ' ', "abcde"},
		{"Padding con car√°cter especial", "abc", 5, '*', "**abc"},
		{"String vac√≠a", "", 3, '-', "---"},
		{"Width cero", "abc", 0, ' ', "abc"},
		{"Caracteres Unicode", "‰Ω†Â•Ω", 4, '~', "~~‰Ω†Â•Ω"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := PadLeft(tt.s, tt.width, tt.padChar)
			if result != tt.expected {
				t.Errorf("PadLeft(%q, %d, %q) = %q; want %q",
					tt.s, tt.width, tt.padChar, result, tt.expected)
			}
		})
	}
}

func TestPadRight(t *testing.T) {
	tests := []struct {
		name     string
		s        string
		width    int
		padChar  rune
		expected string
	}{
		{"String m√°s corta que width", "abc", 5, ' ', "abc  "},
		{"String igual a width", "abc", 3, ' ', "abc"},
		{"String m√°s larga que width", "abcde", 3, ' ', "abcde"},
		{"Padding con car√°cter especial", "abc", 5, '*', "abc**"},
		{"String vac√≠a", "", 3, '-', "---"},
		{"Width cero", "abc", 0, ' ', "abc"},
		{"Caracteres Unicode", "‰Ω†Â•Ω", 4, '~', "‰Ω†Â•Ω~~"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := PadRight(tt.s, tt.width, tt.padChar)
			if result != tt.expected {
				t.Errorf("PadRight(%q, %d, %q) = %q; want %q",
					tt.s, tt.width, tt.padChar, result, tt.expected)
			}
		})
	}
}

func TestPadCenter(t *testing.T) {
	tests := []struct {
		name     string
		s        string
		width    int
		padChar  rune
		expected string
	}{
		{"String m√°s corta que width (padding par)", "abc", 7, ' ', "  abc  "},
		{"String m√°s corta que width (padding impar)", "abc", 6, ' ', " abc  "},
		{"String igual a width", "abc", 3, ' ', "abc"},
		{"String m√°s larga que width", "abcde", 3, ' ', "abcde"},
		{"Padding con car√°cter especial", "abc", 7, '*', "**abc**"},
		{"String vac√≠a", "", 4, '-', "----"},
		{"Width cero", "abc", 0, ' ', "abc"},
		{"Caracteres Unicode", "‰Ω†Â•Ω", 6, '~', "~~‰Ω†Â•Ω~~"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := PadCenter(tt.s, tt.width, tt.padChar)
			if result != tt.expected {
				t.Errorf("PadCenter(%q, %d, %q) = %q; want %q",
					tt.s, tt.width, tt.padChar, result, tt.expected)
			}
		})
	}
}

func TestSubstr(t *testing.T) {
	tests := []struct {
		name     string
		s        string
		length   int
		expected string
	}{
		{"Extraer menos caracteres que la longitud", "abcde", 3, "abc"},
		{"Extraer todos los caracteres", "abc", 3, "abc"},
		{"Longitud mayor que string", "abc", 5, "abc"},
		{"String vac√≠a", "", 3, ""},
		{"Longitud cero", "abc", 0, ""},
		{"Caracteres Unicode", "‰Ω†Â•Ω‰∏ñÁïå", 2, "‰Ω†Â•Ω"},
		{"Extraer un car√°cter", "abcde", 1, "a"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := Substr(tt.s, tt.length)
			if result != tt.expected {
				t.Errorf("Substr(%q, %d) = %q; want %q",
					tt.s, tt.length, result, tt.expected)
			}
		})
	}
}

func TestFormatFloat(t *testing.T) {
	tests := []struct {
		name     string
		f        float64
		decimals int
		expected string
	}{
		{"Dos decimales", 123.456, 2, "123.46"},
		{"Sin decimales", 123.456, 0, "123"},
		{"M√°s decimales que los presentes", 123.4, 3, "123.400"},
		{"N√∫mero negativo", -123.456, 2, "-123.46"},
		{"Cero", 0.0, 2, "0.00"},
		{"Valor peque√±o", 0.00123, 5, "0.00123"},
		{"Redondeo hacia arriba", 0.12345, 4, "0.1235"},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := FormatFloat(tt.f, tt.decimals)
			if result != tt.expected {
				t.Errorf("FormatFloat(%f, %d) = %q; want %q",
					tt.f, tt.decimals, result, tt.expected)
			}
		})
	}
}

func TestSplitString(t *testing.T) {
	tests := []struct {
		name     string
		s        string
		length   int
		expected []string
	}{
		{"Dividir en partes iguales", "abcdef", 2, []string{"ab", "cd", "ef"}},
		{"√öltima parte m√°s corta", "abcde", 2, []string{"ab", "cd", "e"}},
		{"Longitud igual al string", "abcde", 5, []string{"abcde"}},
		{"Longitud mayor que string", "abc", 5, []string{"abc"}},
		{"String vac√≠a", "", 2, []string{}},
		{"Longitud cero", "abc", 0, nil},
		{"Longitud negativa", "abc", -1, nil},
		{"Caracteres Unicode", "‰Ω†Â•Ω‰∏ñÁïå", 2, []string{"‰Ω†Â•Ω", "‰∏ñÁïå"}},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := SplitString(tt.s, tt.length)

			if tt.expected == nil && result != nil {
				t.Errorf("SplitString(%q, %d) = %v; want nil",
					tt.s, tt.length, result)
				return
			}

			if len(result) != len(tt.expected) {
				t.Errorf("SplitString(%q, %d) = %v; want %v",
					tt.s, tt.length, result, tt.expected)
				return
			}

			for i := range result {
				if result[i] != tt.expected[i] {
					t.Errorf("SplitString(%q, %d)[%d] = %q; want %q",
						tt.s, tt.length, i, result[i], tt.expected[i])
				}
			}
		})
	}
}
